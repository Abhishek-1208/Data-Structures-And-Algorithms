  
/**
 * program to find maximum in every window of size k using stack 
 * compilation: gcc sliding_window_maximum.c
 * Execution: ./a.out
 * @Abhishek (1910991168) 
 * 10/08/2021
 * Assignemnt: 7
*/

#include <stdio.h>
#include<stdlib.h>
#include<climits>
//returns max of passed two elements
int max(int a, int b) {
	return a > b ? a : b;
}
//structure to represent our stack
struct stack {
	int top, capacity, *arr, *maxi;
};

//initializing our stack
struct stack* init() {
	struct stack *st = ( struct stack *)malloc(sizeof( struct stack));
	st -> arr = (int *)malloc(5 * sizeof(int));
	st -> maxi = (int *)malloc(5 * sizeof(int));
	st -> capacity = 5;
	st -> top = 0;
	return st;
}


//resizing in case our stack has reached its maximum capacity
void resize(struct stack *st) {
	
	st = (stack *)realloc(st, st -> capacity * 2);
	st -> capacity *= 2;
	
}

//to check if stack is empty or not
int empty(struct stack *st) {
	return st -> top == 0;
}

//to get current size of stack
int size(struct stack *st) {
	return st -> top;
}
//to chek if the stack has reached its maximum capacity or not
int full(struct stack *st) {
	return st -> top == st -> capacity;
}

//to push the element to the top of stack
void push(struct stack *st, int x) {
	//resize first if stack is full
	if(full(st)) {
		resize(st);
	}
	if(size(st) >= 1){
		st -> maxi[st -> top] = max(st -> maxi[st -> top - 1], x);
	}
	else {
		st -> maxi[st -> top] = x;
	}
	st -> arr[st -> top] = x;
	st -> top++;
}

//to pop the element at top
void pop(struct stack *st) {
	//first check if stack is empty
	if(empty(st)) {
		printf("stack underflow\n");
		exit(1);
	}
	else {
		st -> top--;
	}
	
}

//to get the top element of stack
int top(struct stack *st) {
	//check first if stack is empty or not
	if(empty(st)) {
		printf("Error!...stack is empty\n");
		exit(1);
	}
	else {
		return st -> arr[st -> top - 1];
	}
}
//return the maximum in passed stack
int maximum(struct stack *st) {
	//check first if stack is empty or not
	if(empty(st)) {
		printf("Error!...stack is empty\n");
		exit(1);
	}
	else {
		return st -> maxi[st -> top - 1];
	}
}

//to get the maximum in current window
int max_in_window(struct stack *st1, struct stack *st2) {
	int res = INT_MIN;
	
	if(!empty(st1)) {
		res = max(res, maximum(st1));
	}
	
	if(!empty(st2)) {
		res = max(res, maximum(st2));
	}
	
	return res;
}

//remove element from stack and with the help of other stack adjust values
void remove(struct stack *st1, struct stack *st2) {
	
	if(!empty(st1)) {
		pop(st1);
	}
	else {
		while(!empty(st2)) {
			push(st1, top(st2));
			pop(st2);
		}
		pop(st1);
	}
}

//function to find minimum of every window of size k
void sliding_window_minimum(int *arr, int n, int k) {
	
	struct stack *st1 = init(), *st2 = init();
	
	for(int i = 0; i < k; i++) {
		push(st2, arr[i]);
	}
	
	printf("%d ", max_in_window(st1, st2));

	for(int i = k; i < n; i++) {
		//remove first element from previous window
		remove(st1, st2);
		//add last element from current window
		push(st2, arr[i]);
		printf("%d ", max_in_window(st1, st2));
	}
	
	printf("\n");
}

int main() {
	
	int n;
	printf("Enter the number of elements: ");
	scanf("%d", &n);
	int *arr = (int *)malloc(n * sizeof(int));
	for(int i = 0; i < n; i++) {
		scanf("%d", &arr[i]);
	}
	int k;
	printf("Enter the size of window: ");
	scanf("%d", &k);
	sliding_window_minimum(arr, n, k);
}
