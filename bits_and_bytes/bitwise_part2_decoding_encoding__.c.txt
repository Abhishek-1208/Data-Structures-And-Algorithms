/**
 * program to decode base 32 string and then encoding it to base 64
 * compilation: gcc decoding_encoding.c
  Execution: Data-Structures-And-Algorithms/coding/decoding_encoding.c
 * @Abhishek (1910991168) 
 * 18/08/2021
 * Assignemnt: 7 (bitwise assignment)
*/



#include <stdio.h>
#include<stdlib.h>
int base32[256];
char base64[256];

// to swap passed 2 variables
void swap(char *a, char *b ) {
    
    char temp = *a;
    *a = *b;
    *b = temp;
}

//to calculate length of passed string
int strlen(char *str) {
    
    int len = 0;
    while(str[len] != '\0') {
        len++;
    }
    return len;
}
void reverse(char *str) {
    int len = strlen(str);
    int l = 0,r = len - 1;
    while(l < r) {
        swap(&str[l++], &str[r--]);
    }
}


// to convert binary string to corresponding decimal number

int binary_to_decimal(char * bin) {
    
    
    int num = 0;
    int base = 1;
 
    int len = strlen(bin);
    for (int i = len - 1; i >= 0; i--) {
        if (bin[i] == '1')
            num += base;
        base = base * 2;
    }
 
    return num;
    
}

//convert decimal to binary upto len digits..... for eg if len is 8 then it will only find the first 8 bit of number
char* decimal_to_binary(int dec, int len) {
    
    char *bin = (char *)malloc(1000 * sizeof(char));
    int index = 0;
    while(dec) {
        bin[index++] = ('0' + dec % 2);
        dec >>= 1;
    }
    
    while(index < len) {
        bin[index++] = '0';
    }
    
    bin[index] = '\0';
    
    reverse(bin);
    return bin;
    
}

//function to decode the passed base32 string
char* base32_decoder(char *str) {
    
    int len = strlen(str);
    //to store final result
    char *res = (char *)malloc(1000 * sizeof(char));
    int res_idx = 0;
    //removing extra paddding first
    while(str[len - 1] == '=') {
        len--;
    }

    str[len] = '\0';
    
    //to store the binary_form of current string
    char *binary_form = (char *)malloc(1000 * sizeof(char));
    int bin_idx;
    
    //storing the binary_form of current string and taking only 5 digits bcz 2^ 5 = 32
    for(int i  = 0; i < len; i++) {
        char x = str[i];
        char *temp = decimal_to_binary(base32[x], 5);
        
        for(int j = 0; j < 5; j++){
            binary_form[bin_idx++] = temp[j];
        }
        
    }
    
    // keep discarding the extra bits because of padding  
    while(bin_idx % 8 != 0) {
        bin_idx--;
    }

    binary_form[bin_idx] = '\0';
    
    // to convert the bytes to corresponding ascii string         
    for(int i = 0 ; i < bin_idx; i += 8) {

        //temp will store corresponding byte starting at position i
        char temp[8];
        for(int j = i; j < i + 8; j++) {
            temp[j - i] = binary_form[j];
        }
        
        temp[8] = '\0';
        
        char x = (char)binary_to_decimal(temp);
        res[res_idx++] = x;
        
    }
    
    res[res_idx] = '\0';
    
   //returning the decoded string    
    return res;
    
}


char* base64_encoder(char *base32) {
    
    //str contains the decoded string by our function
    char *str = base32_decoder(base32);
    int len = strlen(str);

    //to store binary_form of the string first
    char *binary_form = (char *)malloc(1000 * sizeof(char));
    int bin_idx = 0;
    
    for(int i = 0; i < len; i++) {
        char x = str[i];
       //temp will store first 8 bits of x
        char *temp = decimal_to_binary(x, 8);
        
        for(int j = 0; j < 8; j++){
            binary_form[bin_idx++] = temp[j];
        }
        
    }
    
   //add the extra bits so that number becomes multiple of 6 in base64 we consider a set of 6 bits
    while(bin_idx % 6 != 0) {
        binary_form[bin_idx++] = '0';
    }
    //to store the final result
    char *result = (char *)malloc(1000 * sizeof(char));
    int res_idx = 0;
    
    for(int i = 0; i < bin_idx; i +=6) {
        
        // considering each set of 6 bit
        char temp[6];
        for(int j = i; j < i + 6; j++) {
            temp[j - i] = binary_form[j];
        }
        temp[6] = '\0';
        //getting the number corresponding to current set of bit
        int num = binary_to_decimal(temp);
        //pushing the corresponding encoded value to result
        result[res_idx++] = base64[num];
        
    }
    // add the extra padding required
    while(res_idx % 4 != 0) {
        result[res_idx++] = '=';
        
    }
    
    result[res_idx] = '\0';
    

    return result;
    
}


int main() {
    
    
    { //mapping base32 characters to their values
    
        for(char x= 'A'; x <= 'Z'; x++) {
            base32[x] = x - 'A';
        }
        
        for(char i = '2'; i <= '7'; i++) {
            base32[i] = 26 + (i - '2');
        }
        
    }
    
    { //mapping base64 characters to their values
    
        
        for(char x= 'A'; x <= 'Z'; x++) {
            base64[x - 'A'] = x;
        }
        
        for(char x= 'a'; x <= 'z'; x++) {
            base64[26 + (x - 'a')] = x;
        }
        
        for(char i = '0'; i <= '9'; i++) {
            base64[52 + (i - '0')] = i;
        }
        
        base64[62] = '+';
        base64[63] = '/';
        
    }
    
    
    
    int testcase;
    scanf("%d\n", &testcase);

    while(testcase--) {

        char *str = (char *)malloc(1000 * sizeof(char));
        scanf ("%[^\n]%*c", str);

        printf("%s\n", base64_encoder(str));
        free(str);

    }
}
