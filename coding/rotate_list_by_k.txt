/**
 * function to rotate list by k positions
 * compilation: gcc rotate_list_by_k.c
 * Execution: ./a.out
 * @Abhishek (1910991168) 
 * 30/08/2021
 * Assignemnt: Linked List
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

int len(struct ListNode *head) {
    int n = 0;
    while(head) {
        n++;
        head = head -> next;
    }
    return n;
}

struct ListNode* rotateRight(struct ListNode* head, int k){
// base case
    if(!head || !head -> next) {
        return  head;
    }

    int n = len(head);
    k %= n;
// no change if 0 rotations are needed
    if(k == 0) {
        return head;
    }
// to know how many steps to proceed ahead
    k = n - k;

    struct ListNode *ptr1 = head, *ptr2;
    while(k-- > 1) {
        ptr1 = ptr1 -> next;
    }

    ptr2 = ptr1 -> next;

    while(ptr2 -> next) {
        ptr2 = ptr2 -> next;
    }

// attaching nodes to rotate by k places after finding needful nodes
    ptr2 -> next = head;
    head = ptr1 -> next;
    ptr1 -> next = NULL;

    return head;
    
}