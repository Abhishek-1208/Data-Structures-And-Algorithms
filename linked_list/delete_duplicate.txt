/**
 * function to delete all elements with frequency >= 2
 * compilation: gcc delete_duplicate.c
 * Execution: ./a.out
 * @Abhishek (1910991168) 
 * 30/08/2021
 * Assignemnt: Linked List
*/


 // Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* deleteDuplicates(struct ListNode* head){
    // base case
    if(!head || !head -> next) {
        return head;
    }

    struct ListNode *dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    dummy -> next = head;
    head = NULL;
    
    while(dummy -> next && dummy -> next -> next) {
        //if the value of next two nodes is same.. it means there is duplicacy so we will remove all those elements
        if(dummy -> next -> val == dummy -> next -> next -> val) {
            int x = dummy -> next -> val;
            while(dummy -> next && dummy -> next -> val == x) {
                struct ListNode *temp = dummy -> next;
                dummy -> next = temp -> next;
                free(temp);
            }
            
        }
        // incase value is not same so keep this element and move to next element
        else {
            if(!head) {
                head = dummy;   
            }
            dummy = dummy -> next;
        }
        
    }

    if(head) {
        return head -> next;
    }
   
    else {
        return dummy -> next;
    }

}
