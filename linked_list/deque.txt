/**
 * implementing deque using doubly Linked List
 * compilation: gcc deque.c
 * Execution: ./a.out
 * @Abhishek (1910991168) 
 * 30/08/2021
 * Assignemnt: Linked List
*/

#include <stdio.h>
#include <stdlib.h>

//structure for implementing deque
struct LinkedList {
    int data;
    struct LinkedList *next;
    struct LinkedList *prev;
};
struct deque {
    struct LinkedList *start;
    struct LinkedList *end;
};

// to initialize the deque
struct deque* init() {
	struct deque *q = (struct deque*) malloc(sizeof(struct deque));
	q -> start = q -> end = NULL;
	return q;
}

// to get new node to store data
struct LinkedList* getNode(int val) {
    struct LinkedList *node = (struct LinkedList*)malloc(sizeof(struct LinkedList));
    node -> data = val;
    node -> next = node -> prev = NULL;
    return node;
}

//returns true if deque is empty
int empty(struct deque *head) {
    return head -> start == NULL;
}

//push the element to the front of deque
void push_front(struct deque **head, int val) {
    struct LinkedList *node = getNode(val);
    if(empty(*head)){
        (*head) -> start = (*head) -> end = node;
    }
    else {
        node -> next = (*head) -> start;
        (*head) -> start -> prev = node;
        (*head) -> start = node;
    }
}


//push the element to the back of deque
void push_back(struct deque **head, int val) {
    struct LinkedList *node = getNode(val);
    if(empty(*head)){
        (*head) -> start = (*head) -> end = node;
    }
    else {
        node -> prev = (*head) -> end;
        (*head) -> end -> next = node;
        (*head) -> end = node;
    }
}


//pop the element from deque if present
void pop_front(struct deque **head) {
    if(empty(*head)) {
        printf("Underflow\n");
    }
    else {
	struct LinkedList *temp = (*head) -> start -> next;
        free((*head) -> start);
        if(temp == NULL) {
            (*head) -> start = (*head) -> end = NULL;
        }
        else {
            (*head) -> start = temp; 
            temp -> prev = NULL;  
        }
    }
}

//pop the element from deque if present
void pop_back(struct deque **head) {
    if(empty(*head)) {
        printf("Underflow\n");
    }
    else {
	struct LinkedList *temp = (*head) -> end -> prev;
        free((*head) -> end);
        if(temp == NULL) {
            (*head) -> start = (*head) -> end = NULL;
        }
        else {
            (*head) -> end = temp; 
            temp -> next = NULL;  
        }
    }
}

//return the front element if present
int front(struct deque *head) {
    if(empty(head)) {
        printf("Underflow\n");
        return -1;
    }
    return head -> start -> data;
}

//return the back element if present
int back(struct deque *head) {
    if(empty(head)) {
        printf("Underflow\n");
        return -1;
    }

    return head -> end -> data;

}

int main() {
	
    struct deque *q = init();
    
	push_back(&q, 10);
    push_front(&q, 20);
    
	printf("front is %d\n", front(q));
	printf("back is %d\n", back(q));
    
	pop_back(&q);
    pop_front(&q);
}