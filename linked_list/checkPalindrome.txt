/**
 * function to check whether passed linkedlist is palindrome or not
 * compilation: gcc checkPalindrome.c
 * Execution: ./a.out
 * @Abhishek (1910991168) 
 * 30/08/2021
 * Assignemnt: Linked List
*/


// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
 };

// to get the middle node of linkedlist 
struct ListNode* getMiddle(struct ListNode *head) {
    struct ListNode *slow = head;
    struct ListNode *fast = head -> next;
    while(fast && fast -> next) {
        slow = slow -> next;
        fast = fast -> next -> next;
    }
    return slow;
}

// to reverse the linked list
struct ListNode* reverse(struct ListNode *head) {
    struct ListNode * temp = NULL;
    while(head) {
        struct ListNode * curr_next = head -> next;
        head -> next = temp;
        temp = head;
        head = curr_next;
    }
    return temp;
}
// to check for palindrome
bool compare(struct ListNode *start1, struct ListNode *start2) {
    while(start1 && start2) {
        if(start1 ->val != start2 -> val) {
            return false;
        }
        start1 = start1 -> next;
        start2 = start2 -> next;
    }
    return true;
}

//to manipulate data so as to check palindrome in constant space and linear time
bool isPalindrome(struct ListNode* head) {
    if(!head || !head -> next) {
        return true;
    } 

    //breaking the list from the half and reversing the 2nd part
    struct ListNode *mid = getMiddle(head);
    struct ListNode * temp = reverse_and_break(mid -> next);
    mid -> next = NULL;
    
    // saving the result to a variable
    bool result = compare(head, temp);
    
    // combining the breaked list together so that data remains as it is
    temp  = reverse_and_break(temp);
    mid -> next = temp;
    
    // returning the result
    return result;
    
}
