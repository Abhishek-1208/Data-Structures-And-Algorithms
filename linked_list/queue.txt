/**
 * implementing queue using singly Linked List
 * compilation: gcc queue.c
 * Execution: ./a.out
 * @Abhishek (1910991168) 
 * 30/08/2021
 * Assignemnt: Linked List
*/

#include <stdio.h>
#include <stdlib.h>

//structure for implementing queue
struct LinkedList {
    int data;
    struct LinkedList *next;
};
struct queue {
    struct LinkedList *start;
    struct LinkedList *end;
};

// to initialize the queue
struct queue* init() {
	struct queue *q = (struct queue*) malloc(sizeof(struct queue));
	q -> start = q -> end = NULL;
        return q;
}

// to get new node to store data
struct LinkedList* getNode(int val) {
    struct LinkedList *node = (struct LinkedList*)malloc(sizeof(struct LinkedList));
    node -> data = val;
    node -> next = NULL;
    return node;
}

//returns true if queue is empty
int empty(struct queue *head) {
    return head -> start == NULL;
}

//push the element to the queue
void push(struct queue **head, int val) {
    struct LinkedList *node = getNode(val);
    if(empty(*head)){
        (*head) -> start = (*head) -> end = node;
    }
    else {
        (*head) -> end -> next = node;
        (*head) -> end = node;
    }
}


//pop the element from queue if present
void pop(struct queue **head) {
    if(empty(*head)) {
        printf("Underflow\n");
    }
    else {
	struct LinkedList *temp = (*head) -> start -> next;
        free((*head) -> start);
        if(temp == NULL) {
            (*head) -> start = (*head) -> end = NULL;
        }
        else {
            (*head) -> start = temp;   
        }
    }
}

//return the front element if present
int front(struct queue *head) {
    if(empty(head)) {
        printf("Underflow\n");
        return -1;
    }
    return head -> start -> data;
}

int main() {
	
    struct queue *q = init();
    
    push(&q, 10);
    push(&q, 20);
    
    printf("front is %d\n", front(q));
    
    pop(&q);
    
}